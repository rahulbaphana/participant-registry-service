buildscript {
    ext {
        lombok = 'org.projectlombok:lombok:1.18.10'
    }
}

plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
    id 'jacoco'
}

group = 'com.new.beginnings'
version = '1.0-SNAPSHOT'
sourceCompatibility = '14'
targetCompatibility = '14'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
    set('testcontainersVersion', "1.15.1")
}

dependencies {
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.flywaydb:flyway-core:5.2.4'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'

    compileOnly lombok
    annotationProcessor lombok
    testCompileOnly lombok
    testAnnotationProcessor lombok
}

configure(allprojects) {
    dependencies {
        compileOnly lombok
        annotationProcessor lombok
    }
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

jacocoTestCoverageVerification {
    dependsOn test

    violationRules {
        rule {
            limit {
                minimum = 0.95
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/**/ParticipantRegistryServiceApplication**', 'com/**/config/*', 'com/**/exception/*', 'com/**/support/*'])
        }))
    }
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.enabled true

        html.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/**/ParticipantRegistryServiceApplication**', 'com/**/config/*', 'com/**/exception/*', 'com/**/support/*'])
        }))
    }
}

test {
	useJUnitPlatform()
}
